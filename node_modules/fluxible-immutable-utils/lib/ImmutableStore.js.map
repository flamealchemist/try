{"version":3,"sources":["src/ImmutableStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;8BAMwB,iBAAiB;;yBACnB,WAAW;;;;IAEZ,cAAc;AACpB,aADM,cAAc,CACnB,UAAU,EAAE;8BADP,cAAc;;AAE3B,mCAFa,cAAc,6CAErB,UAAU,EAAE;AAClB,YAAI,CAAC,MAAM,GAAG,uBAAU,GAAG,EAAE,CAAC;KACjC;;cAJgB,cAAc;;iBAAd,cAAc;;eAMtB,qBAAG;AACR,mBAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;eAEQ,mBAAC,KAAK,EAAE;AACb,gBAAI,CAAC,MAAM,GAAG,uBAAU,MAAM,CAAC,KAAK,CAAC,CAAC;SACzC;;;eAEO,kBAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE;AAC/B,oBAAQ,GAAG,uBAAU,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAEtC,gBAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;AAC9B,uBAAO,KAAK,CAAC;aAChB;;AAED,gBAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;;AAEvB,gBAAI,KAAK,EAAC;AACN,oBAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAC7B,MACI;AACD,oBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC5B;;AAED,mBAAO,IAAI,CAAC;SACf;;;eAES,oBAAC,aAAa,EAAE,KAAK,EAAE,OAAO,EAAE;AACtC,mBAAO,IAAI,CAAC,QAAQ,CAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAChC,KAAK,EACL,OAAO,CACV,CAAC;SACL;;;eAEO,oBAAG;AACP,mBAAO,IAAI,CAAC,SAAS,EAAE,CAAC;SAC3B;;;eAEE,aAAC,GAAG,EAAE;AACL,mBAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC7E;;;WA/CgB,cAAc;mBAH3B,SAAS;;qBAGI,cAAc","file":"src/ImmutableStore.js","sourcesContent":["/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\nimport {BaseStore} from 'fluxible/addons';\nimport Immutable from 'immutable';\n\nexport default class ImmutableStore extends BaseStore {\n    constructor(dispatcher) {\n        super(dispatcher);\n        this._state = Immutable.Map();\n    }\n\n    dehydrate() {\n        return this._state;\n    }\n\n    rehydrate(state) {\n        this._state = Immutable.fromJS(state);\n    }\n\n    setState(newState, event, payload) {\n        newState = Immutable.fromJS(newState);\n\n        if (this._state.equals(newState)) {\n            return false;\n        }\n\n        this._state = newState;\n\n        if (event){\n            this.emit(event, payload);\n        }\n        else {\n            this.emitChange(payload);\n        }\n\n        return true;\n    }\n\n    mergeState(stateFragment, event, payload) {\n        return this.setState(\n            this._state.merge(stateFragment),\n            event,\n            payload\n        );\n    }\n\n    getState() {\n        return this.dehydrate();\n    }\n\n    get(key) {\n        return Array.isArray(key) ? this._state.getIn(key) : this._state.get(key);\n    }\n}\n"]}